ylab("f0 (Hz)")
ggsave("../graphs/MAR-raw-f0-contour-sentence36.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence710" & d$language == "Marathi",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/MAR-raw-f0-contour-sentence710.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence1215" & d$language == "Marathi",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/MAR-raw-f0-contour-sentence1215.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence25" & d$language == "Marathi",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/MAR-raw-f0-contour-sentence25.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence413" & d$language == "Marathi",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/MAR-raw-f0-contour-sentence413.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence916" & d$language == "Marathi",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/MAR-raw-f0-contour-sentence916.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence1114" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggplot(data=d[d$sentence == "sentence18" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence18.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence36" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence36.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence710" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence710.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence1215" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence1215.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence25" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence25.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence413" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence413.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence916" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence916.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence1114" & d$language == "Gujarati",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/GUJ-raw-f0-contour-sentence1114.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence18" & d$language == "Gujarati",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/GUJ-raw-f0-contour-sentence18.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence36" & d$language == "Gujarati",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/GUJ-raw-f0-contour-sentence36.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence710" & d$language == "Gujarati",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/GUJ-raw-f0-contour-sentence710.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence1215" & d$language == "Gujarati",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/GUJ-raw-f0-contour-sentence1215.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence25" & d$language == "Gujarati",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/GUJ-raw-f0-contour-sentence25.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence413" & d$language == "Gujarati",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/GUJ-raw-f0-contour-sentence413.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence916" & d$language == "Gujarati",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/GUJ-raw-f0-contour-sentence916.pdf",height=14,width=14)
# find the first and last time of each subject and predicate utterance
minT = aggregate(time ~ File + label, data=d, FUN=min)
colnames(minT)[ncol(minT)] = 'time.min'
head(minT)
maxT = aggregate(time ~ File + label, data=d, FUN=max)
colnames(maxT)[ncol(maxT)] = 'time.max'
head(maxT)
# merge the first and last time to one data frame
minmaxT = merge(minT,maxT,by=c('File','label'))
head(minmaxT)
length(unique(minmaxT$File))
# add first and last time info to data
d = merge(d,minmaxT,by=c('File','label'))
head(d)
nrow(d)
# normalize each time point such that subject times go from 0 to .4999 and
# predicate times go from .5 to 1
d$total.utt.time <- d$time.max - d$time.min
# normalize each time point
d$total.utt.time <- d$time.max - d$time.min
d$Time <- d$time / d$total.utt.time
head(d)
table(d$Time)
table(d$gf)
# normalize each time point such that subject times go from 0 to .499 and
# predicate times go from .5 to 1
d$Time <- 0
d$Time <- ifelse(d$gf == "subject",
(d$time - d$time.min) / ((d$time.max - d$time.min)*2),
((d$time - d$time.min) / ((d$time.max - d$time.min)*2))+.5)
head(d)
sapply(d,function(x) sum(is.na(x))) #452 missing f0 values
nrow(d) #15920
# min and max times per subject and predicate (to see if normalization worked so far; not done yet)
min(dm[dm$gf == "subject",]$Time) #0
# min and max times per subject and predicate (to see if normalization worked so far; not done yet)
min(d[d$gf == "subject",]$Time) #0
max(d[d$gf == "subject",]$Time) #.5
min(d[d$gf == "predicate",]$Time) #.5
max(d[d$gf == "predicate",]$Time) #1
# normalize each time point by total utterance length and
# align each normalized time point such that the two APs go from 0 to 1
d$total.utt.time <- d$time.max - d$time.min
d$nTime <- (d$nTime - d$time.min) / d$total.utt.time
# normalize each time point by total utterance length and
# align each normalized time point such that the two APs go from 0 to 1
d$total.utt.time <- d$time.max - d$time.min
d$nTime <- (d$time - d$time.min) / d$total.utt.time
min(d[d$gf == "subject",]$nTime) #0
max(d[d$gf == "subject",]$nTime) #.5
min(d[d$gf == "predicate",]$nTime) #.5
max(d[d$gf == "predicate",]$nTime) #1
d$nTime <- ifelse(d$gf == "subject",
(d$time - d$time.min) / ((d$total.ap.time)*2), # *2 to get to .5 instead of 1 for subject AP
((d$time - d$time.min) / ((d$total.ap.time)*2))+.5) # +.5 to go from .5 to 1 for predicate AP
head(d)
nrow(d) #15920
# min and max times per subject and predicate (to see if normalization worked so far; not done yet)
min(d[d$gf == "subject",]$nTime) #0
max(d[d$gf == "subject",]$nTime) #.5
# normalize each time point such that subject times go from 0 to .5 and
# predicate times go from .5 to 1
d$total.ap.time <- d$time.max - d$time.min
d$nTime <- ifelse(d$gf == "subject",
(d$time - d$time.min) / ((d$total.ap.time)*2), # *2 to get to .5 instead of 1 for subject AP
((d$time - d$time.min) / ((d$total.ap.time)*2))+.5) # +.5 to go from .5 to 1 for predicate AP
head(d)
nrow(d) #52090
# min and max times per subject and predicate (to see if normalization worked so far; not done yet)
min(d[d$gf == "subject",]$nTime) #0
max(d[d$gf == "subject",]$nTime) #.5
min(d[d$gf == "predicate",]$nTime) #.5
max(d[d$gf == "predicate",]$nTime) #1
# for the subject times that are .5, subtract .0001ms to make them precede min of predicate
d$Time2 <- d$Time
# for the subject times that are .5, subtract .0001ms to make them precede min of predicate
d$nTime2 <- d$nTime
d$nTime2 <- ifelse(d$gf == "subject" & d$nTime == 0.5, 0.49999, d$nTime)
max(d[d$gf == "subject",]$nTime2)   #.499
# now that it worked, set Time to Time2
d$nTime <- d$nTime2
# for the subject times that are .5, subtract .0001ms to make them precede min of predicate
d$nTime <- ifelse(d$gf == "subject" & d$nTime == 0.5, 0.49999, d$nTime)
max(d[d$gf == "subject",]$nTime)   #.49999
# plots
boxplot(d$time, main='Original time')
boxplot(d[d$gf == "subject",]$Time, main='Normalized time')
boxplot(d[d$gf == "predicate",]$Time, main='Normalized time')
# plots
boxplot(d$time, main='Original time')
# find f0 mean and sd of each talker
f0mean = aggregate(f0 ~ talker, data=d, FUN=mean)
colnames(f0mean)[ncol(f0mean)] = 'f0.mean'
f0sd = aggregate(f0 ~ talker, data=d, FUN=sd)
colnames(f0sd)[ncol(f0sd)] = 'f0.sd'
f0 = merge(f0mean, f0sd, by='talker')
f0
# find f0 mean and sd of each talker in each language
f0mean = aggregate(f0 ~ talker + language, data=d, FUN=mean)
colnames(f0mean)[ncol(f0mean)] = 'f0.mean'
f0sd = aggregate(f0 ~ talker + language, data=d, FUN=sd)
colnames(f0sd)[ncol(f0sd)] = 'f0.sd'
f0 = merge(f0mean, f0sd, by='talker')
f0
f0mean
f0sd
f0 = rbind(f0mean, f0sd)
f0 = rbind(f0mean, f0sd,by=c('talker','language'))
f0 = rbind(f0mean, f0sd,by=c("talker","language"))
f0mean
f0sd
f0 = merge(f0mean, f0sd,by=c("talker","language"))
f0
# save the f0 mean and sd for each talker for LH analysis
write.csv(f0, "../data/f0-mean-sd-by-talker.csv", row.names=FALSE)
# merge this talker f0 mean and sd with data
d = merge(d, f0, by='talker')
head(d)
# z-transform f0
d$f0.z = (d$f0 - d$f0.mean) / d$f0.sd
head(d)
# plots to make sure normalization worked
par(mfrow=c(1,2))
boxplot(d[d$gf == "subject",]$Time, main='Normalized subject AP time')
boxplot(d[d$gf == "predicate",]$Time, main='Normalized predicate AP time')
# plots to check if normalization worked
par(mfrow=c(1,2))
boxplot(d$f0,main='Original f0')
boxplot(d$f0.z,main='Z-transformed f0 by talker')
ggplot(d, aes(x=talker, y=f0.z)) +
geom_boxplot()
ggplot(d, aes(x=talker, y=f0.z)) +
facet_grid(language) +
geom_boxplot()
ggplot(d, aes(x=talker, y=f0.z)) +
facet_grid(~language) +
geom_boxplot()
ggplot(d, aes(x=talker, y=f0.z)) +
facet_wrap(~language) +
geom_boxplot()
ggplot(d, aes(x=talker, y=f0.z)) +
geom_boxplot() +
facet_wrap(~language)
ggplot(d, aes(x=talker, y=f0.z)) +
geom_boxplot()
ggplot(d, aes(x=talker, y=f0.z)) +
geom_boxplot() +
facet_wrap(. ~ language)
ggplot(d, aes(x=talker, y=f0.z)) +
geom_boxplot() +
facet_wrap(~ language)
table(d$language)
names(d)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source("helpers.r")
# load packages
library(tidyverse)
library(lmerTest)
theme_set(theme_bw())
# read in the data
dc <- read.csv("../data/Chodri-pitch-by-time.csv")
dg <- read.csv("../data/Gujarati-pitch-by-time.csv")
dm <- read.csv("../data/Marathi-pitch-by-time.csv")
nrow(dc) #19408
nrow(dg) #20760
nrow(dm) #17067
# add ".wav" to File names so that code below works
dc$File <- paste(dc$File,".wav",sep="")
dg$File <- paste(dg$File,".wav",sep="")
dm$File <- paste(dm$File,".wav",sep="")
length(unique(dc$File)) #170
length(unique(dg$File)) #186
length(unique(dm$File)) #175
d <- bind_rows(dc,dm,dg)
length(unique(d$File)) #531
table(d$File)
# exclude disfluent utterances
d <- droplevels(subset(d,!d$File %in% excluded$File))
nrow(excluded) #16
length(unique(d$File)) #528 (168 C + 186 G + 174 M)
table(d$File %in% disfluent$File) # no disfluent utterances remain
# Chodri
pauseCHO <- read.csv(file="../data/Chodri-pauses.csv", header=TRUE, sep=",")
pauseCHO
nrow(pauseCHO) #17
d <- droplevels(subset(d, !(d$File %in% pauseCHO$File)))
length(unique(d$File)) #512 (16 Chodri utterances with internal pause excluded)
# Gujarati
pauseGUJ <- read.csv(file="../data/Gujarati-pauses.csv", header=TRUE, sep=",")
pauseGUJ
nrow(pauseGUJ) #18
d <- droplevels(subset(d, !(d$File %in% pauseGUJ$File)))
length(unique(d$File)) #494 (18 Gujarati utterances with internal pause excluded)
# Marathi
pauseMAR <- read.csv(file="../data/Marathi-pauses.csv", header=TRUE, sep=",")
pauseMAR
nrow(pauseMAR) #10
d <- droplevels(subset(d, !(d$File %in% pauseMAR$File)))
length(unique(d$File)) #484 (10 Marathi utterances with internal pause excluded)
# language
d$language <- ifelse(grepl("CHO-",as.character(d$File)),"Chodri",
ifelse(grepl("MAR-",as.character(d$File)),"Marathi",
ifelse(grepl("GUJ-",as.character(d$File)),"Gujarati",
"OTHER")))
table(d$language)
# talker
table(d$File)
d$talker <- d$File
d$talker <- gsub("CHO-","", d$talker)
d$talker <- gsub("MAR-","", d$talker)
d$talker <- gsub("GUJ-","", d$talker)
d$talker <- gsub("-target[0-9]+.wav","", d$talker)
table(d$talker)
d$talker <- as.factor(as.character(d$talker))
# utterance
d$utt <- d$File
d$utt <- gsub("CHO-","", d$utt)
d$utt <- gsub("MAR-","", d$utt)
d$utt <- gsub("GUJ-","", d$utt)
d$utt <- gsub("P[0-9]+-","", d$utt)
d$utt <- gsub(".wav","", d$utt)
table(d$utt)
d$sentence <- d$utt
d$sentence <- ifelse(d$utt == "target1" | d$utt == "target8", "sentence18",
ifelse(d$utt == "target2" | d$utt == "target5", "sentence25",
ifelse(d$utt == "target3" | d$utt == "target6", "sentence36",
ifelse(d$utt == "target4" | d$utt == "target13", "sentence413",
ifelse(d$utt == "target7" | d$utt == "target10", "sentence710",
ifelse(d$utt == "target9" | d$utt == "target16", "sentence916",
ifelse(d$utt == "target11" | d$utt == "target14", "sentence1114", "sentence1215")))))))
table(d$sentence)
# focus condition (subject focus, verb focus)
d$cond <- ifelse(d$utt == "target1" | d$utt == "target3" |
d$utt == "target5" | d$utt == "target7" |
d$utt == "target9" | d$utt == "target11" |
d$utt == "target13" | d$utt == "target15", "subjFoc", "predFoc")
d$cond <- as.factor(d$cond)
table(d$cond)
# grammatical function
table(d$label)
d$gf <- ifelse(d$label == "laavanya" | d$label == "ananyaa", "subject","predicate")
d$gf <- as.factor(d$gf)
table(d$gf)
# unique utterances per language
length(unique(d[d$language == "Chodri",]$File)) #152 (168 - 16 utterances with internal pause)
length(unique(d[d$language == "Gujarati",]$File)) #168 (186 - 18 utterances with internal pause)
length(unique(d[d$language == "Marathi",]$File)) #164 (174 - 10 utterances with internal pause)
table(d$sentence)
ggplot(data=d[d$sentence == "sentence1114" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence1114.pdf",height=14,width=14)
ggplot(data=d[d$sentence == "sentence18" & d$language == "Chodri",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time (ms)") +
ylab("f0 (Hz)")
ggsave("../graphs/CHO-raw-f0-contour-sentence18.pdf",height=14,width=14)
# find the first and last time of each subject and predicate utterance
minT = aggregate(time ~ File + label, data=d, FUN=min)
colnames(minT)[ncol(minT)] = 'time.min'
head(minT)
maxT = aggregate(time ~ File + label, data=d, FUN=max)
colnames(maxT)[ncol(maxT)] = 'time.max'
head(maxT)
# merge the first and last time to one data frame
minmaxT = merge(minT,maxT,by=c('File','label'))
head(minmaxT)
length(unique(minmaxT$File)) #484
# add first and last time info to data
d = merge(d,minmaxT,by=c('File','label'))
head(d)
nrow(d) #52090
table(d$gf) # only subject and predicate accentual phrases
# normalize each time point such that subject times go from 0 to .5 and
# predicate times go from .5 to 1
d$total.ap.time <- d$time.max - d$time.min
d$nTime <- ifelse(d$gf == "subject",
(d$time - d$time.min) / ((d$total.ap.time)*2), # *2 to get to .5 instead of 1 for subject AP
((d$time - d$time.min) / ((d$total.ap.time)*2))+.5) # +.5 to go from .5 to 1 for predicate AP
head(d)
nrow(d) #52090
# min and max times per subject and predicate (to see if normalization worked so far; not done yet)
min(d[d$gf == "subject",]$nTime) #0
max(d[d$gf == "subject",]$nTime) #.5
min(d[d$gf == "predicate",]$nTime) #.5
max(d[d$gf == "predicate",]$nTime) #1
# for the subject times that are .5, subtract .0001ms to make them precede min of predicate
d$nTime <- ifelse(d$gf == "subject" & d$nTime == 0.5, 0.49999, d$nTime)
max(d[d$gf == "subject",]$nTime)   #.49999
# plots to make sure normalization worked
par(mfrow=c(1,2))
boxplot(d[d$gf == "subject",]$Time, main='Normalized subject AP time')
boxplot(d[d$gf == "predicate",]$Time, main='Normalized predicate AP time')
boxplot(d[d$gf == "subject",]$nTime, main='Normalized subject AP time')
boxplot(d[d$gf == "predicate",]$nTime, main='Normalized predicate AP time')
table(d$language)
# find f0 mean and sd of each talker in each language
f0mean = aggregate(f0 ~ talker + language, data=d, FUN=mean)
colnames(f0mean)[ncol(f0mean)] = 'f0.mean'
f0mean
f0sd = aggregate(f0 ~ talker + language, data=d, FUN=sd)
colnames(f0sd)[ncol(f0sd)] = 'f0.sd'
f0sd
f0 = merge(f0mean, f0sd,by=c("talker","language"))
f0
# save the f0 mean and sd for each talker for LH analysis
write.csv(f0, "../data/f0-mean-sd-by-talker.csv", row.names=FALSE)
# merge this talker f0 mean and sd with data
d = merge(d, f0, by=c("talker","language"))
head(d)
table(d$language)
# plots to check if normalization worked
par(mfrow=c(1,2))
boxplot(d$f0,main='Original f0')
boxplot(d$f0.z,main='Z-transformed f0 by talker')
# z-transform f0
d$f0.z = (d$f0 - d$f0.mean) / d$f0.sd
head(d)
# plots to check if normalization worked
par(mfrow=c(1,2))
boxplot(d$f0,main='Original f0')
boxplot(d$f0.z,main='Z-transformed f0 by talker')
table(d$language)
ggplot(d, aes(x=talker, y=f0.z)) +
geom_boxplot() +
facet_wrap(~ language)
# change outliers to NA: f0.z values below -3 and above 3
nrow(d) #15920
nrow(d[d$f0.z > 3 & !is.na(d$f0.z),]) #15
nrow(d[d$f0.z < -3 & !is.na(d$f0.z),]) #83
d$f0.z[d$f0.z > 3] <- NA
d$f0.z[d$f0.z <= -3] <- NA
nrow(d)
sapply(d,function(x) sum(is.na(x))) #550
ggplot(d, aes(x=talker, y=f0.z)) +
geom_boxplot()
ggplot(d, aes(x=talker, y=f0.z)) +
geom_boxplot() +
facet_wrap(~ language)
ggplot(data=d[d$sentence == "sentence1114" & d$talker == "P7" & d$cond == "predFoc" & d$language == "Marathi",], aes(x=Time, y=f0.z)) +
geom_point(na.rm=TRUE,size=.1) +
#facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("normalized time") +
ylab("normalized f0")
ggplot(data=d[d$sentence == "sentence1114" & d$talker == "P7" & d$cond == "predFoc" & d$language == "Marathi",], aes(x=nTime, y=f0.z)) +
geom_point(na.rm=TRUE,size=.1) +
#facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("normalized time") +
ylab("normalized f0")
ggsave("../graphs/MAR-f0z-example.pdf",height=2,width=6.2)
ggplot(data=d[d$sentence == "sentence36" & d$talker == "P7" & d$cond == "predFoc" & d$language == "Marathi",], aes(x=nTime, y=f0.z)) +
geom_point(na.rm=TRUE,size=.1) +
#facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("normalized time") +
ylab("normalized f0")
ggsave("../graphs/MAR-f0z-example.pdf",height=2,width=6.2)
ggplot(data=d[d$sentence == "sentence36" & d$talker == "P7" & d$cond == "predFoc" & d$language == "Marathi",], aes(x=Time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
#facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("normalized time") +
ylab("normalized f0")
ggplot(data=d[d$sentence == "sentence36" & d$talker == "P7" & d$cond == "predFoc" & d$language == "Marathi",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
#facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("normalized time") +
ylab("normalized f0")
ggplot(data=d[d$sentence == "sentence36" & d$talker == "P7" & d$cond == "predFoc" & d$language == "Marathi",], aes(x=time, y=f0)) +
geom_point(na.rm=TRUE,size=.1) +
#facet_grid(talker ~ cond, scales = "free", space = "fixed") +
xlab("time") +
ylab("f0")
ggsave("../graphs/MAR-unnormalized-example.pdf",height=2,width=6.2)
# start getting the data in the right shape for GAMM
d <- start_event(d, event=c("File","utt"))
# GAMM analysis ----
library(gam)
library(mgcv)
# GAMM analysis ----
library(mgvc)
install.packages("mgvc")
